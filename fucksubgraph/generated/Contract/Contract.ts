// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogAnySwapIn extends ethereum.Event {
  get params(): LogAnySwapIn__Params {
    return new LogAnySwapIn__Params(this);
  }
}

export class LogAnySwapIn__Params {
  _event: LogAnySwapIn;

  constructor(event: LogAnySwapIn) {
    this._event = event;
  }

  get txhash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fromChainID(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get toChainID(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LogAnySwapOut extends ethereum.Event {
  get params(): LogAnySwapOut__Params {
    return new LogAnySwapOut__Params(this);
  }
}

export class LogAnySwapOut__Params {
  _event: LogAnySwapOut;

  constructor(event: LogAnySwapOut) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fromChainID(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get toChainID(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LogAnySwapTradeTokensForNative extends ethereum.Event {
  get params(): LogAnySwapTradeTokensForNative__Params {
    return new LogAnySwapTradeTokensForNative__Params(this);
  }
}

export class LogAnySwapTradeTokensForNative__Params {
  _event: LogAnySwapTradeTokensForNative;

  constructor(event: LogAnySwapTradeTokensForNative) {
    this._event = event;
  }

  get path(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fromChainID(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get toChainID(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class LogAnySwapTradeTokensForTokens extends ethereum.Event {
  get params(): LogAnySwapTradeTokensForTokens__Params {
    return new LogAnySwapTradeTokensForTokens__Params(this);
  }
}

export class LogAnySwapTradeTokensForTokens__Params {
  _event: LogAnySwapTradeTokensForTokens;

  constructor(event: LogAnySwapTradeTokensForTokens) {
    this._event = event;
  }

  get path(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fromChainID(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get toChainID(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class LogChangeMPC extends ethereum.Event {
  get params(): LogChangeMPC__Params {
    return new LogChangeMPC__Params(this);
  }
}

export class LogChangeMPC__Params {
  _event: LogChangeMPC;

  constructor(event: LogChangeMPC) {
    this._event = event;
  }

  get oldMPC(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newMPC(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get effectiveTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get chainID(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogChangeRouter extends ethereum.Event {
  get params(): LogChangeRouter__Params {
    return new LogChangeRouter__Params(this);
  }
}

export class LogChangeRouter__Params {
  _event: LogChangeRouter;

  constructor(event: LogChangeRouter) {
    this._event = event;
  }

  get oldRouter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newRouter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get chainID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  anySwapInExactTokensForNative(
    txs: Bytes,
    amountIn: BigInt,
    amountOutMin: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt,
    fromChainID: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "anySwapInExactTokensForNative",
      "anySwapInExactTokensForNative(bytes32,uint256,uint256,address[],address,uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromFixedBytes(txs),
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(fromChainID)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_anySwapInExactTokensForNative(
    txs: Bytes,
    amountIn: BigInt,
    amountOutMin: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt,
    fromChainID: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "anySwapInExactTokensForNative",
      "anySwapInExactTokensForNative(bytes32,uint256,uint256,address[],address,uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromFixedBytes(txs),
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(fromChainID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  anySwapInExactTokensForTokens(
    txs: Bytes,
    amountIn: BigInt,
    amountOutMin: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt,
    fromChainID: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "anySwapInExactTokensForTokens",
      "anySwapInExactTokensForTokens(bytes32,uint256,uint256,address[],address,uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromFixedBytes(txs),
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(fromChainID)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_anySwapInExactTokensForTokens(
    txs: Bytes,
    amountIn: BigInt,
    amountOutMin: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt,
    fromChainID: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "anySwapInExactTokensForTokens",
      "anySwapInExactTokensForTokens(bytes32,uint256,uint256,address[],address,uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromFixedBytes(txs),
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(fromChainID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  cID(): BigInt {
    let result = super.call("cID", "cID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cID", "cID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  changeMPC(newMPC: Address): boolean {
    let result = super.call("changeMPC", "changeMPC(address):(bool)", [
      ethereum.Value.fromAddress(newMPC)
    ]);

    return result[0].toBoolean();
  }

  try_changeMPC(newMPC: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("changeMPC", "changeMPC(address):(bool)", [
      ethereum.Value.fromAddress(newMPC)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  changeVault(token: Address, newVault: Address): boolean {
    let result = super.call(
      "changeVault",
      "changeVault(address,address):(bool)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(newVault)]
    );

    return result[0].toBoolean();
  }

  try_changeVault(
    token: Address,
    newVault: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "changeVault",
      "changeVault(address,address):(bool)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(newVault)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAmountIn(
    amountOut: BigInt,
    reserveIn: BigInt,
    reserveOut: BigInt
  ): BigInt {
    let result = super.call(
      "getAmountIn",
      "getAmountIn(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(reserveIn),
        ethereum.Value.fromUnsignedBigInt(reserveOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAmountIn(
    amountOut: BigInt,
    reserveIn: BigInt,
    reserveOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAmountIn",
      "getAmountIn(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(reserveIn),
        ethereum.Value.fromUnsignedBigInt(reserveOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAmountOut(
    amountIn: BigInt,
    reserveIn: BigInt,
    reserveOut: BigInt
  ): BigInt {
    let result = super.call(
      "getAmountOut",
      "getAmountOut(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(reserveIn),
        ethereum.Value.fromUnsignedBigInt(reserveOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAmountOut(
    amountIn: BigInt,
    reserveIn: BigInt,
    reserveOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAmountOut",
      "getAmountOut(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(reserveIn),
        ethereum.Value.fromUnsignedBigInt(reserveOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAmountsIn(amountOut: BigInt, path: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getAmountsIn",
      "getAmountsIn(uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromAddressArray(path)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getAmountsIn(
    amountOut: BigInt,
    path: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAmountsIn",
      "getAmountsIn(uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromAddressArray(path)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAmountsOut(amountIn: BigInt, path: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getAmountsOut",
      "getAmountsOut(uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromAddressArray(path)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getAmountsOut(
    amountIn: BigInt,
    path: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAmountsOut",
      "getAmountsOut(uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromAddressArray(path)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  mpc(): Address {
    let result = super.call("mpc", "mpc():(address)", []);

    return result[0].toAddress();
  }

  try_mpc(): ethereum.CallResult<Address> {
    let result = super.tryCall("mpc", "mpc():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  quote(amountA: BigInt, reserveA: BigInt, reserveB: BigInt): BigInt {
    let result = super.call(
      "quote",
      "quote(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountA),
        ethereum.Value.fromUnsignedBigInt(reserveA),
        ethereum.Value.fromUnsignedBigInt(reserveB)
      ]
    );

    return result[0].toBigInt();
  }

  try_quote(
    amountA: BigInt,
    reserveA: BigInt,
    reserveB: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quote",
      "quote(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountA),
        ethereum.Value.fromUnsignedBigInt(reserveA),
        ethereum.Value.fromUnsignedBigInt(reserveB)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wNATIVE(): Address {
    let result = super.call("wNATIVE", "wNATIVE():(address)", []);

    return result[0].toAddress();
  }

  try_wNATIVE(): ethereum.CallResult<Address> {
    let result = super.tryCall("wNATIVE", "wNATIVE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _wNATIVE(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _mpc(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AnySwapFeeToCall extends ethereum.Call {
  get inputs(): AnySwapFeeToCall__Inputs {
    return new AnySwapFeeToCall__Inputs(this);
  }

  get outputs(): AnySwapFeeToCall__Outputs {
    return new AnySwapFeeToCall__Outputs(this);
  }
}

export class AnySwapFeeToCall__Inputs {
  _call: AnySwapFeeToCall;

  constructor(call: AnySwapFeeToCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AnySwapFeeToCall__Outputs {
  _call: AnySwapFeeToCall;

  constructor(call: AnySwapFeeToCall) {
    this._call = call;
  }
}

export class AnySwapInCall extends ethereum.Call {
  get inputs(): AnySwapInCall__Inputs {
    return new AnySwapInCall__Inputs(this);
  }

  get outputs(): AnySwapInCall__Outputs {
    return new AnySwapInCall__Outputs(this);
  }
}

export class AnySwapInCall__Inputs {
  _call: AnySwapInCall;

  constructor(call: AnySwapInCall) {
    this._call = call;
  }

  get txs(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get to(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get fromChainIDs(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class AnySwapInCall__Outputs {
  _call: AnySwapInCall;

  constructor(call: AnySwapInCall) {
    this._call = call;
  }
}

export class AnySwapIn1Call extends ethereum.Call {
  get inputs(): AnySwapIn1Call__Inputs {
    return new AnySwapIn1Call__Inputs(this);
  }

  get outputs(): AnySwapIn1Call__Outputs {
    return new AnySwapIn1Call__Outputs(this);
  }
}

export class AnySwapIn1Call__Inputs {
  _call: AnySwapIn1Call;

  constructor(call: AnySwapIn1Call) {
    this._call = call;
  }

  get txs(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get fromChainID(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AnySwapIn1Call__Outputs {
  _call: AnySwapIn1Call;

  constructor(call: AnySwapIn1Call) {
    this._call = call;
  }
}

export class AnySwapInAutoCall extends ethereum.Call {
  get inputs(): AnySwapInAutoCall__Inputs {
    return new AnySwapInAutoCall__Inputs(this);
  }

  get outputs(): AnySwapInAutoCall__Outputs {
    return new AnySwapInAutoCall__Outputs(this);
  }
}

export class AnySwapInAutoCall__Inputs {
  _call: AnySwapInAutoCall;

  constructor(call: AnySwapInAutoCall) {
    this._call = call;
  }

  get txs(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get fromChainID(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AnySwapInAutoCall__Outputs {
  _call: AnySwapInAutoCall;

  constructor(call: AnySwapInAutoCall) {
    this._call = call;
  }
}

export class AnySwapInExactTokensForNativeCall extends ethereum.Call {
  get inputs(): AnySwapInExactTokensForNativeCall__Inputs {
    return new AnySwapInExactTokensForNativeCall__Inputs(this);
  }

  get outputs(): AnySwapInExactTokensForNativeCall__Outputs {
    return new AnySwapInExactTokensForNativeCall__Outputs(this);
  }
}

export class AnySwapInExactTokensForNativeCall__Inputs {
  _call: AnySwapInExactTokensForNativeCall;

  constructor(call: AnySwapInExactTokensForNativeCall) {
    this._call = call;
  }

  get txs(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get fromChainID(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class AnySwapInExactTokensForNativeCall__Outputs {
  _call: AnySwapInExactTokensForNativeCall;

  constructor(call: AnySwapInExactTokensForNativeCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class AnySwapInExactTokensForTokensCall extends ethereum.Call {
  get inputs(): AnySwapInExactTokensForTokensCall__Inputs {
    return new AnySwapInExactTokensForTokensCall__Inputs(this);
  }

  get outputs(): AnySwapInExactTokensForTokensCall__Outputs {
    return new AnySwapInExactTokensForTokensCall__Outputs(this);
  }
}

export class AnySwapInExactTokensForTokensCall__Inputs {
  _call: AnySwapInExactTokensForTokensCall;

  constructor(call: AnySwapInExactTokensForTokensCall) {
    this._call = call;
  }

  get txs(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get fromChainID(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class AnySwapInExactTokensForTokensCall__Outputs {
  _call: AnySwapInExactTokensForTokensCall;

  constructor(call: AnySwapInExactTokensForTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class AnySwapInUnderlyingCall extends ethereum.Call {
  get inputs(): AnySwapInUnderlyingCall__Inputs {
    return new AnySwapInUnderlyingCall__Inputs(this);
  }

  get outputs(): AnySwapInUnderlyingCall__Outputs {
    return new AnySwapInUnderlyingCall__Outputs(this);
  }
}

export class AnySwapInUnderlyingCall__Inputs {
  _call: AnySwapInUnderlyingCall;

  constructor(call: AnySwapInUnderlyingCall) {
    this._call = call;
  }

  get txs(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get fromChainID(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AnySwapInUnderlyingCall__Outputs {
  _call: AnySwapInUnderlyingCall;

  constructor(call: AnySwapInUnderlyingCall) {
    this._call = call;
  }
}

export class AnySwapOutCall extends ethereum.Call {
  get inputs(): AnySwapOutCall__Inputs {
    return new AnySwapOutCall__Inputs(this);
  }

  get outputs(): AnySwapOutCall__Outputs {
    return new AnySwapOutCall__Outputs(this);
  }
}

export class AnySwapOutCall__Inputs {
  _call: AnySwapOutCall;

  constructor(call: AnySwapOutCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get toChainID(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AnySwapOutCall__Outputs {
  _call: AnySwapOutCall;

  constructor(call: AnySwapOutCall) {
    this._call = call;
  }
}

export class AnySwapOut1Call extends ethereum.Call {
  get inputs(): AnySwapOut1Call__Inputs {
    return new AnySwapOut1Call__Inputs(this);
  }

  get outputs(): AnySwapOut1Call__Outputs {
    return new AnySwapOut1Call__Outputs(this);
  }
}

export class AnySwapOut1Call__Inputs {
  _call: AnySwapOut1Call;

  constructor(call: AnySwapOut1Call) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get to(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get toChainIDs(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class AnySwapOut1Call__Outputs {
  _call: AnySwapOut1Call;

  constructor(call: AnySwapOut1Call) {
    this._call = call;
  }
}

export class AnySwapOutExactTokensForNativeCall extends ethereum.Call {
  get inputs(): AnySwapOutExactTokensForNativeCall__Inputs {
    return new AnySwapOutExactTokensForNativeCall__Inputs(this);
  }

  get outputs(): AnySwapOutExactTokensForNativeCall__Outputs {
    return new AnySwapOutExactTokensForNativeCall__Outputs(this);
  }
}

export class AnySwapOutExactTokensForNativeCall__Inputs {
  _call: AnySwapOutExactTokensForNativeCall;

  constructor(call: AnySwapOutExactTokensForNativeCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get toChainID(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class AnySwapOutExactTokensForNativeCall__Outputs {
  _call: AnySwapOutExactTokensForNativeCall;

  constructor(call: AnySwapOutExactTokensForNativeCall) {
    this._call = call;
  }
}

export class AnySwapOutExactTokensForNativeUnderlyingCall extends ethereum.Call {
  get inputs(): AnySwapOutExactTokensForNativeUnderlyingCall__Inputs {
    return new AnySwapOutExactTokensForNativeUnderlyingCall__Inputs(this);
  }

  get outputs(): AnySwapOutExactTokensForNativeUnderlyingCall__Outputs {
    return new AnySwapOutExactTokensForNativeUnderlyingCall__Outputs(this);
  }
}

export class AnySwapOutExactTokensForNativeUnderlyingCall__Inputs {
  _call: AnySwapOutExactTokensForNativeUnderlyingCall;

  constructor(call: AnySwapOutExactTokensForNativeUnderlyingCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get toChainID(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class AnySwapOutExactTokensForNativeUnderlyingCall__Outputs {
  _call: AnySwapOutExactTokensForNativeUnderlyingCall;

  constructor(call: AnySwapOutExactTokensForNativeUnderlyingCall) {
    this._call = call;
  }
}

export class AnySwapOutExactTokensForNativeUnderlyingWithPermitCall extends ethereum.Call {
  get inputs(): AnySwapOutExactTokensForNativeUnderlyingWithPermitCall__Inputs {
    return new AnySwapOutExactTokensForNativeUnderlyingWithPermitCall__Inputs(
      this
    );
  }

  get outputs(): AnySwapOutExactTokensForNativeUnderlyingWithPermitCall__Outputs {
    return new AnySwapOutExactTokensForNativeUnderlyingWithPermitCall__Outputs(
      this
    );
  }
}

export class AnySwapOutExactTokensForNativeUnderlyingWithPermitCall__Inputs {
  _call: AnySwapOutExactTokensForNativeUnderlyingWithPermitCall;

  constructor(call: AnySwapOutExactTokensForNativeUnderlyingWithPermitCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get toChainID(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class AnySwapOutExactTokensForNativeUnderlyingWithPermitCall__Outputs {
  _call: AnySwapOutExactTokensForNativeUnderlyingWithPermitCall;

  constructor(call: AnySwapOutExactTokensForNativeUnderlyingWithPermitCall) {
    this._call = call;
  }
}

export class AnySwapOutExactTokensForNativeUnderlyingWithTransferPermitCall extends ethereum.Call {
  get inputs(): AnySwapOutExactTokensForNativeUnderlyingWithTransferPermitCall__Inputs {
    return new AnySwapOutExactTokensForNativeUnderlyingWithTransferPermitCall__Inputs(
      this
    );
  }

  get outputs(): AnySwapOutExactTokensForNativeUnderlyingWithTransferPermitCall__Outputs {
    return new AnySwapOutExactTokensForNativeUnderlyingWithTransferPermitCall__Outputs(
      this
    );
  }
}

export class AnySwapOutExactTokensForNativeUnderlyingWithTransferPermitCall__Inputs {
  _call: AnySwapOutExactTokensForNativeUnderlyingWithTransferPermitCall;

  constructor(
    call: AnySwapOutExactTokensForNativeUnderlyingWithTransferPermitCall
  ) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get toChainID(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class AnySwapOutExactTokensForNativeUnderlyingWithTransferPermitCall__Outputs {
  _call: AnySwapOutExactTokensForNativeUnderlyingWithTransferPermitCall;

  constructor(
    call: AnySwapOutExactTokensForNativeUnderlyingWithTransferPermitCall
  ) {
    this._call = call;
  }
}

export class AnySwapOutExactTokensForTokensCall extends ethereum.Call {
  get inputs(): AnySwapOutExactTokensForTokensCall__Inputs {
    return new AnySwapOutExactTokensForTokensCall__Inputs(this);
  }

  get outputs(): AnySwapOutExactTokensForTokensCall__Outputs {
    return new AnySwapOutExactTokensForTokensCall__Outputs(this);
  }
}

export class AnySwapOutExactTokensForTokensCall__Inputs {
  _call: AnySwapOutExactTokensForTokensCall;

  constructor(call: AnySwapOutExactTokensForTokensCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get toChainID(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class AnySwapOutExactTokensForTokensCall__Outputs {
  _call: AnySwapOutExactTokensForTokensCall;

  constructor(call: AnySwapOutExactTokensForTokensCall) {
    this._call = call;
  }
}

export class AnySwapOutExactTokensForTokensUnderlyingCall extends ethereum.Call {
  get inputs(): AnySwapOutExactTokensForTokensUnderlyingCall__Inputs {
    return new AnySwapOutExactTokensForTokensUnderlyingCall__Inputs(this);
  }

  get outputs(): AnySwapOutExactTokensForTokensUnderlyingCall__Outputs {
    return new AnySwapOutExactTokensForTokensUnderlyingCall__Outputs(this);
  }
}

export class AnySwapOutExactTokensForTokensUnderlyingCall__Inputs {
  _call: AnySwapOutExactTokensForTokensUnderlyingCall;

  constructor(call: AnySwapOutExactTokensForTokensUnderlyingCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get toChainID(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class AnySwapOutExactTokensForTokensUnderlyingCall__Outputs {
  _call: AnySwapOutExactTokensForTokensUnderlyingCall;

  constructor(call: AnySwapOutExactTokensForTokensUnderlyingCall) {
    this._call = call;
  }
}

export class AnySwapOutExactTokensForTokensUnderlyingWithPermitCall extends ethereum.Call {
  get inputs(): AnySwapOutExactTokensForTokensUnderlyingWithPermitCall__Inputs {
    return new AnySwapOutExactTokensForTokensUnderlyingWithPermitCall__Inputs(
      this
    );
  }

  get outputs(): AnySwapOutExactTokensForTokensUnderlyingWithPermitCall__Outputs {
    return new AnySwapOutExactTokensForTokensUnderlyingWithPermitCall__Outputs(
      this
    );
  }
}

export class AnySwapOutExactTokensForTokensUnderlyingWithPermitCall__Inputs {
  _call: AnySwapOutExactTokensForTokensUnderlyingWithPermitCall;

  constructor(call: AnySwapOutExactTokensForTokensUnderlyingWithPermitCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get toChainID(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class AnySwapOutExactTokensForTokensUnderlyingWithPermitCall__Outputs {
  _call: AnySwapOutExactTokensForTokensUnderlyingWithPermitCall;

  constructor(call: AnySwapOutExactTokensForTokensUnderlyingWithPermitCall) {
    this._call = call;
  }
}

export class AnySwapOutExactTokensForTokensUnderlyingWithTransferPermitCall extends ethereum.Call {
  get inputs(): AnySwapOutExactTokensForTokensUnderlyingWithTransferPermitCall__Inputs {
    return new AnySwapOutExactTokensForTokensUnderlyingWithTransferPermitCall__Inputs(
      this
    );
  }

  get outputs(): AnySwapOutExactTokensForTokensUnderlyingWithTransferPermitCall__Outputs {
    return new AnySwapOutExactTokensForTokensUnderlyingWithTransferPermitCall__Outputs(
      this
    );
  }
}

export class AnySwapOutExactTokensForTokensUnderlyingWithTransferPermitCall__Inputs {
  _call: AnySwapOutExactTokensForTokensUnderlyingWithTransferPermitCall;

  constructor(
    call: AnySwapOutExactTokensForTokensUnderlyingWithTransferPermitCall
  ) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get toChainID(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class AnySwapOutExactTokensForTokensUnderlyingWithTransferPermitCall__Outputs {
  _call: AnySwapOutExactTokensForTokensUnderlyingWithTransferPermitCall;

  constructor(
    call: AnySwapOutExactTokensForTokensUnderlyingWithTransferPermitCall
  ) {
    this._call = call;
  }
}

export class AnySwapOutUnderlyingCall extends ethereum.Call {
  get inputs(): AnySwapOutUnderlyingCall__Inputs {
    return new AnySwapOutUnderlyingCall__Inputs(this);
  }

  get outputs(): AnySwapOutUnderlyingCall__Outputs {
    return new AnySwapOutUnderlyingCall__Outputs(this);
  }
}

export class AnySwapOutUnderlyingCall__Inputs {
  _call: AnySwapOutUnderlyingCall;

  constructor(call: AnySwapOutUnderlyingCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get toChainID(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AnySwapOutUnderlyingCall__Outputs {
  _call: AnySwapOutUnderlyingCall;

  constructor(call: AnySwapOutUnderlyingCall) {
    this._call = call;
  }
}

export class AnySwapOutUnderlyingWithPermitCall extends ethereum.Call {
  get inputs(): AnySwapOutUnderlyingWithPermitCall__Inputs {
    return new AnySwapOutUnderlyingWithPermitCall__Inputs(this);
  }

  get outputs(): AnySwapOutUnderlyingWithPermitCall__Outputs {
    return new AnySwapOutUnderlyingWithPermitCall__Outputs(this);
  }
}

export class AnySwapOutUnderlyingWithPermitCall__Inputs {
  _call: AnySwapOutUnderlyingWithPermitCall;

  constructor(call: AnySwapOutUnderlyingWithPermitCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get toChainID(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class AnySwapOutUnderlyingWithPermitCall__Outputs {
  _call: AnySwapOutUnderlyingWithPermitCall;

  constructor(call: AnySwapOutUnderlyingWithPermitCall) {
    this._call = call;
  }
}

export class AnySwapOutUnderlyingWithTransferPermitCall extends ethereum.Call {
  get inputs(): AnySwapOutUnderlyingWithTransferPermitCall__Inputs {
    return new AnySwapOutUnderlyingWithTransferPermitCall__Inputs(this);
  }

  get outputs(): AnySwapOutUnderlyingWithTransferPermitCall__Outputs {
    return new AnySwapOutUnderlyingWithTransferPermitCall__Outputs(this);
  }
}

export class AnySwapOutUnderlyingWithTransferPermitCall__Inputs {
  _call: AnySwapOutUnderlyingWithTransferPermitCall;

  constructor(call: AnySwapOutUnderlyingWithTransferPermitCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get toChainID(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class AnySwapOutUnderlyingWithTransferPermitCall__Outputs {
  _call: AnySwapOutUnderlyingWithTransferPermitCall;

  constructor(call: AnySwapOutUnderlyingWithTransferPermitCall) {
    this._call = call;
  }
}

export class ChangeMPCCall extends ethereum.Call {
  get inputs(): ChangeMPCCall__Inputs {
    return new ChangeMPCCall__Inputs(this);
  }

  get outputs(): ChangeMPCCall__Outputs {
    return new ChangeMPCCall__Outputs(this);
  }
}

export class ChangeMPCCall__Inputs {
  _call: ChangeMPCCall;

  constructor(call: ChangeMPCCall) {
    this._call = call;
  }

  get newMPC(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeMPCCall__Outputs {
  _call: ChangeMPCCall;

  constructor(call: ChangeMPCCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ChangeVaultCall extends ethereum.Call {
  get inputs(): ChangeVaultCall__Inputs {
    return new ChangeVaultCall__Inputs(this);
  }

  get outputs(): ChangeVaultCall__Outputs {
    return new ChangeVaultCall__Outputs(this);
  }
}

export class ChangeVaultCall__Inputs {
  _call: ChangeVaultCall;

  constructor(call: ChangeVaultCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newVault(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangeVaultCall__Outputs {
  _call: ChangeVaultCall;

  constructor(call: ChangeVaultCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
